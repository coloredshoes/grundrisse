# AUTOGENERATED FROM:
#     'admin-interface/backend/sources/queries/create_source.edgeql'
#     'admin-interface/backend/sources/queries/delete_source.edgeql'
#     'admin-interface/backend/sources/queries/get_all_sources.edgeql'
#     'admin-interface/backend/sources/queries/get_source_by_id.edgeql'
# WITH:
#     $ gel-py --dir admin-interface/backend/sources/queries --file admin-interface/backend/sources/queries.py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateSourceResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetAllSourcesResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    type: str
    url: str
    is_active: bool | None
    created_at: datetime.datetime | None
    updated_at: datetime.datetime | None


async def create_source(
    executor: gel.AsyncIOExecutor,
    *,
    name: str,
    type: str,
    url: str,
) -> CreateSourceResult:
    return await executor.query_single(
        """\
        INSERT Source {
            name := <str>$name,
            type := <str>$type,
            url := <str>$url
        }\
        """,
        name=name,
        type=type,
        url=url,
    )


async def delete_source(
    executor: gel.AsyncIOExecutor,
    *,
    source_id: uuid.UUID,
) -> CreateSourceResult | None:
    return await executor.query_single(
        """\
        DELETE Source
        FILTER .id = <uuid>$source_id\
        """,
        source_id=source_id,
    )


async def get_all_sources(
    executor: gel.AsyncIOExecutor,
) -> list[GetAllSourcesResult]:
    return await executor.query(
        """\
        SELECT Source {
            id,
            name,
            type,
            url,
            is_active,
            created_at,
            updated_at
        }
        ORDER BY .created_at DESC\
        """,
    )


async def get_source_by_id(
    executor: gel.AsyncIOExecutor,
    *,
    source_id: uuid.UUID,
) -> GetAllSourcesResult | None:
    return await executor.query_single(
        """\
        SELECT Source {
            id,
            name,
            type,
            url,
            is_active,
            created_at,
            updated_at
        }
        FILTER .id = <uuid>$source_id\
        """,
        source_id=source_id,
    )
