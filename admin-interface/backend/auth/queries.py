# AUTOGENERATED FROM:
#     'admin-interface/backend/auth/queries/authenticate_user.edgeql'
#     'admin-interface/backend/auth/queries/create_user.edgeql'
# WITH:
#     $ gel-py --dir admin-interface/backend/auth/queries --file admin-interface/backend/auth/queries.py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class AuthenticateUserResult(NoPydanticValidation):
    id: uuid.UUID
    username: str


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID


async def authenticate_user(
    executor: gel.AsyncIOExecutor,
    *,
    username: str,
    password_hash: str,
) -> AuthenticateUserResult | None:
    return await executor.query_single(
        """\
        SELECT User {
            username
        }
        FILTER .username = <str>$username AND .password_hash = <str>$password_hash\
        """,
        username=username,
        password_hash=password_hash,
    )


async def create_user(
    executor: gel.AsyncIOExecutor,
    *,
    username: str,
    password_hash: str,
) -> CreateUserResult | None:
    return await executor.query_single(
        """\
        INSERT User {
            username := <str>$username,
            password_hash := <str>$password_hash
        } UNLESS CONFLICT ON .username\
        """,
        username=username,
        password_hash=password_hash,
    )
